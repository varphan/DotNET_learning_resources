using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Rewrite;
var builder = WebApplication.CreateBuilder(args);


builder.Services.AddSingleton<ITaskService>(new InMemoryTaskService());

var app = builder.Build();

app.UseRewriter(new RewriteOptions().AddRedirect("tasks/(.*)","todos/$1"));

var todos = new List<Todo>();

app.MapGet("/", ()=>"Hello World");
app.MapGet("/todos", (ITaskService service) => service.GetTodos());

app.MapGet("/todos/{id}", Results<Ok<Todo>, NotFound>(int id,ITaskService service) => { 
       
    var targetTodo = service.GetTodoById(id);
    return targetTodo is null
            ? TypedResults.NotFound()
            : TypedResults.Ok(targetTodo);
});

app.MapPost("/todos", (Todo task,ITaskService service) =>
{
    service.AddTodo(task);
    return TypedResults.Created("/todos/{id}", task);

})
    .AddEndpointFilter(async (context, next) => {

        var taskArgument = context.GetArgument<Todo>(0);
        var errors = new Dictionary<string, string[]>();

        if(taskArgument.DueDate<DateTime.UtcNow)
        {
            errors.Add(nameof(Todo.DueDate), ["Cannot have due date in the past"]);
        }
        if(taskArgument.IsCompleted)
        {
            errors.Add(nameof(Todo.IsCompleted), ["Cannot add a completed todo."]);
        }

        if (errors.Count > 0)
        {
            return Results.ValidationProblem(errors);
        }

        return await next(context);
    
    });

app.MapDelete("/todos/{id}", (int id, ITaskService service) =>
{
    service.DeleteTodoById(id);   
    return TypedResults.NoContent();
});


app.Run();


public record Todo(int Id,string Name,DateTime DueDate,bool IsCompleted);

interface ITaskService
{
    Todo? GetTodoById(int Id);

    List<Todo> GetTodos();

    void DeleteTodoById(int Id);

    Todo AddTodo(Todo todo);
}


public class InMemoryTaskService : ITaskService
{
    private readonly List<Todo> _todos = [];


    public Todo? GetTodoById(int id)
    {
        return _todos.FirstOrDefault(todo => todo.Id == id);
    }

    public List<Todo> GetTodos()
    {
        return _todos;
    }

    public void DeleteTodoById(int id)
    {
        var todo = GetTodoById(id);
        if (todo != null)
        {
            _todos.Remove(todo);
        }
    }

    public Todo AddTodo(Todo task)
    {
        _todos.Add(task);
        return task;
    }
}

